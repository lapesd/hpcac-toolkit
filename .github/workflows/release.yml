name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS Intel (x86_64)
          - target: x86_64-apple-darwin
            os: macos-13
            name: macos-intel
            asset_name: hpcac-toolkit-macos-intel
            
          # macOS Apple Silicon (ARM64)
          - target: aarch64-apple-darwin
            os: macos-14
            name: macos-arm64
            asset_name: hpcac-toolkit-macos-arm64
            
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-amd64
            asset_name: hpcac-toolkit-linux-amd64
            
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
            asset_name: hpcac-toolkit-linux-arm64
            use_cross: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      # Install cross for Linux ARM64 cross-compilation
      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross

      # Build using cross for Linux ARM64, native for others
      - name: Build binary (cross)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}

      - name: Build binary (native)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      # Create the final artifact with proper naming
      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/hpcac-toolkit artifacts/${{ matrix.asset_name }}
          chmod +x artifacts/${{ matrix.asset_name }}

      # Create compressed archives
      - name: Create tar.gz (Unix)
        if: runner.os != 'Windows'
        run: |
          cd artifacts
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.asset_name }}
          
      # Upload artifacts for the release job
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: artifacts/${{ matrix.asset_name }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## Changes
            
            - Add your release notes here
            
            ## Downloads
            
            - **macOS Intel**: `hpcac-toolkit-macos-intel.tar.gz`
            - **macOS Apple Silicon**: `hpcac-toolkit-macos-arm64.tar.gz`
            - **Linux x86_64**: `hpcac-toolkit-linux-amd64.tar.gz`
            - **Linux ARM64**: `hpcac-toolkit-linux-arm64.tar.gz`
            
            ## Installation

            1. Download the appropriate archive for your platform
            2. Extract: `tar -xzf hpcac-toolkit-*.tar.gz`
            3. Make executable: `chmod +x hpcac-toolkit-*`
            4. Run: `./hpcac-toolkit-*`
          draft: false
          prerelease: false

      - name: Upload macOS Intel
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/hpcac-toolkit-macos-intel/hpcac-toolkit-macos-intel.tar.gz
          asset_name: hpcac-toolkit-macos-intel.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/hpcac-toolkit-macos-arm64/hpcac-toolkit-macos-arm64.tar.gz
          asset_name: hpcac-toolkit-macos-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux x86_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/hpcac-toolkit-linux-amd64/hpcac-toolkit-linux-amd64.tar.gz
          asset_name: hpcac-toolkit-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Linux ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/hpcac-toolkit-linux-arm64/hpcac-toolkit-linux-arm64.tar.gz
          asset_name: hpcac-toolkit-linux-arm64.tar.gz
          asset_content_type: application/gzip
